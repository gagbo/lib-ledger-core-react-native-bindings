// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from validators.djinni

#import "RCTCoreLGCosmosLikeValidatorCommission.h"
#import "LGCosmosLikeValidatorCommission.h"

@implementation RCTCoreLGCosmosLikeValidatorCommission

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeValidatorCommission)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithRates:(NSDictionary *)rates
                          updateTime:(nonnull NSDate *)updateTime withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    RCTCoreLGCosmosLikeCommissionRates *rctParam_rates = (RCTCoreLGCosmosLikeCommissionRates *)[self.bridge moduleForName:@"CoreLGCosmosLikeCommissionRates"];
    LGCosmosLikeCommissionRates *field_0 = (LGCosmosLikeCommissionRates *)[rctParam_rates.objcImplementations objectForKey:rates[@"uid"]];
    [implementationsData setObject:rates[@"uid"] forKey:@"rates"];


    LGCosmosLikeValidatorCommission * finalResult = [[LGCosmosLikeValidatorCommission alloc] initWithRates:field_0 updateTime:updateTime];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeValidatorCommission *rctImpl = (RCTCoreLGCosmosLikeValidatorCommission *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorCommission"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeValidatorCommission", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGCosmosLikeValidatorCommission *objcImpl = (LGCosmosLikeValidatorCommission *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_0 = objcImpl.rates;
    NSString *field_0_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeCommissionRates *rctImpl_field_0 = (RCTCoreLGCosmosLikeCommissionRates *)[self.bridge moduleForName:@"CoreLGCosmosLikeCommissionRates"];
    NSArray *field_0_array = [[NSArray alloc] initWithObjects:field_0, field_0_uuid, nil];
    [rctImpl_field_0 baseSetObject:field_0_array];
    NSDictionary *converted_field_0 = @{@"type" : @"CoreLGCosmosLikeCommissionRates", @"uid" : field_0_uuid };
    [implementationsData setObject:converted_field_0 forKey:@"rates"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getRates, getRates:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"rates"];
    resolve(result);
}

RCT_REMAP_METHOD(getUpdateTime, getUpdateTime:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorCommission *objcImpl = (LGCosmosLikeValidatorCommission *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.updateTime};
    resolve(result);
}

@end
