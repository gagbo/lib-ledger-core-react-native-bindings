// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "RCTCoreLGCosmosLikeMsgMultiSend.h"
#import "LGCosmosLikeMsgMultiSend.h"

@implementation RCTCoreLGCosmosLikeMsgMultiSend

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeMsgMultiSend)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithInputs:(NSArray <NSDictionary *> *)inputs
                              outputs:(NSArray <NSDictionary *> *)outputs withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    NSMutableArray *field_0 = [[NSMutableArray alloc] init];

    NSMutableArray *field_0_data = [[NSMutableArray alloc] init];

    for (id inputs_elem in inputs)
    {
        RCTCoreLGCosmosLikeMultiSendInput *rctParam_inputs_elem = (RCTCoreLGCosmosLikeMultiSendInput *)[self.bridge moduleForName:@"CoreLGCosmosLikeMultiSendInput"];
        LGCosmosLikeMultiSendInput *field_0_elem = (LGCosmosLikeMultiSendInput *)[rctParam_inputs_elem.objcImplementations objectForKey:inputs_elem[@"uid"]];
        [field_0_data addObject:inputs_elem[@"uid"]];
        [field_0 addObject:field_0_elem];

    }
    [implementationsData setObject:field_0_data forKey:@"inputs"];

    NSMutableArray *field_1 = [[NSMutableArray alloc] init];

    NSMutableArray *field_1_data = [[NSMutableArray alloc] init];

    for (id outputs_elem in outputs)
    {
        RCTCoreLGCosmosLikeMultiSendOutput *rctParam_outputs_elem = (RCTCoreLGCosmosLikeMultiSendOutput *)[self.bridge moduleForName:@"CoreLGCosmosLikeMultiSendOutput"];
        LGCosmosLikeMultiSendOutput *field_1_elem = (LGCosmosLikeMultiSendOutput *)[rctParam_outputs_elem.objcImplementations objectForKey:outputs_elem[@"uid"]];
        [field_1_data addObject:outputs_elem[@"uid"]];
        [field_1 addObject:field_1_elem];

    }
    [implementationsData setObject:field_1_data forKey:@"outputs"];



    LGCosmosLikeMsgMultiSend * finalResult = [[LGCosmosLikeMsgMultiSend alloc] initWithInputs:field_0 outputs:field_1];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgMultiSend *rctImpl = (RCTCoreLGCosmosLikeMsgMultiSend *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgMultiSend"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgMultiSend", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGCosmosLikeMsgMultiSend *objcImpl = (LGCosmosLikeMsgMultiSend *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_0 = objcImpl.inputs;
    NSMutableArray *converted_field_0 = [[NSMutableArray alloc] init];
    for (id field_0_elem in field_0)
    {
        NSString *field_0_elem_uuid = [[NSUUID UUID] UUIDString];
        RCTCoreLGCosmosLikeMultiSendInput *rctImpl_field_0_elem = (RCTCoreLGCosmosLikeMultiSendInput *)[self.bridge moduleForName:@"CoreLGCosmosLikeMultiSendInput"];
        NSArray *field_0_elem_array = [[NSArray alloc] initWithObjects:field_0_elem, field_0_elem_uuid, nil];
        [rctImpl_field_0_elem baseSetObject:field_0_elem_array];
        NSDictionary *converted_field_0_elem = @{@"type" : @"CoreLGCosmosLikeMultiSendInput", @"uid" : field_0_elem_uuid };
        [converted_field_0 addObject:converted_field_0_elem];
    }
    [implementationsData setObject:converted_field_0 forKey:@"inputs"];
    id field_1 = objcImpl.outputs;
    NSMutableArray *converted_field_1 = [[NSMutableArray alloc] init];
    for (id field_1_elem in field_1)
    {
        NSString *field_1_elem_uuid = [[NSUUID UUID] UUIDString];
        RCTCoreLGCosmosLikeMultiSendOutput *rctImpl_field_1_elem = (RCTCoreLGCosmosLikeMultiSendOutput *)[self.bridge moduleForName:@"CoreLGCosmosLikeMultiSendOutput"];
        NSArray *field_1_elem_array = [[NSArray alloc] initWithObjects:field_1_elem, field_1_elem_uuid, nil];
        [rctImpl_field_1_elem baseSetObject:field_1_elem_array];
        NSDictionary *converted_field_1_elem = @{@"type" : @"CoreLGCosmosLikeMultiSendOutput", @"uid" : field_1_elem_uuid };
        [converted_field_1 addObject:converted_field_1_elem];
    }
    [implementationsData setObject:converted_field_1 forKey:@"outputs"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getInputs, getInputs:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSArray<NSDictionary *> *result = [data objectForKey:@"inputs"];
    resolve(result);
}

RCT_REMAP_METHOD(getOutputs, getOutputs:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSArray<NSDictionary *> *result = [data objectForKey:@"outputs"];
    resolve(result);
}

@end
