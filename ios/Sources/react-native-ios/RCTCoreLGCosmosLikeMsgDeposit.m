// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "RCTCoreLGCosmosLikeMsgDeposit.h"
#import "LGCosmosLikeMsgDeposit.h"

@implementation RCTCoreLGCosmosLikeMsgDeposit

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeMsgDeposit)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithDepositor:(nonnull NSString *)depositor
                              proposalId:(nonnull NSString *)proposalId
                                  amount:(NSArray <NSDictionary *> *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    NSMutableArray *field_2 = [[NSMutableArray alloc] init];

    NSMutableArray *field_2_data = [[NSMutableArray alloc] init];

    for (id amount_elem in amount)
    {
        RCTCoreLGCosmosLikeAmount *rctParam_amount_elem = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
        LGCosmosLikeAmount *field_2_elem = (LGCosmosLikeAmount *)[rctParam_amount_elem.objcImplementations objectForKey:amount_elem[@"uid"]];
        [field_2_data addObject:amount_elem[@"uid"]];
        [field_2 addObject:field_2_elem];

    }
    [implementationsData setObject:field_2_data forKey:@"amount"];



    LGCosmosLikeMsgDeposit * finalResult = [[LGCosmosLikeMsgDeposit alloc] initWithDepositor:depositor proposalId:proposalId amount:field_2];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgDeposit *rctImpl = (RCTCoreLGCosmosLikeMsgDeposit *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgDeposit"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgDeposit", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGCosmosLikeMsgDeposit *objcImpl = (LGCosmosLikeMsgDeposit *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_2 = objcImpl.amount;
    NSMutableArray *converted_field_2 = [[NSMutableArray alloc] init];
    for (id field_2_elem in field_2)
    {
        NSString *field_2_elem_uuid = [[NSUUID UUID] UUIDString];
        RCTCoreLGCosmosLikeAmount *rctImpl_field_2_elem = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
        NSArray *field_2_elem_array = [[NSArray alloc] initWithObjects:field_2_elem, field_2_elem_uuid, nil];
        [rctImpl_field_2_elem baseSetObject:field_2_elem_array];
        NSDictionary *converted_field_2_elem = @{@"type" : @"CoreLGCosmosLikeAmount", @"uid" : field_2_elem_uuid };
        [converted_field_2 addObject:converted_field_2_elem];
    }
    [implementationsData setObject:converted_field_2 forKey:@"amount"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getDepositor, getDepositor:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgDeposit *objcImpl = (LGCosmosLikeMsgDeposit *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.depositor};
    resolve(result);
}

RCT_REMAP_METHOD(getProposalId, getProposalId:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgDeposit *objcImpl = (LGCosmosLikeMsgDeposit *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.proposalId};
    resolve(result);
}

RCT_REMAP_METHOD(getAmount, getAmount:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSArray<NSDictionary *> *result = [data objectForKey:@"amount"];
    resolve(result);
}

@end
