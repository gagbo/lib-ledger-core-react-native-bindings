// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from validators.djinni

#import "RCTCoreLGCosmosLikeValidatorSigningInformation.h"
#import "LGCosmosLikeValidatorSigningInformation.h"

@implementation RCTCoreLGCosmosLikeValidatorSigningInformation

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeValidatorSigningInformation)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithStartHeight:(int)startHeight
                               indexOffset:(int)indexOffset
                               jailedUntil:(nonnull NSDate *)jailedUntil
                                tombstoned:(BOOL)tombstoned
                       missedBlocksCounter:(int)missedBlocksCounter withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {


    LGCosmosLikeValidatorSigningInformation * finalResult = [[LGCosmosLikeValidatorSigningInformation alloc] initWithStartHeight:startHeight indexOffset:indexOffset jailedUntil:jailedUntil tombstoned:tombstoned missedBlocksCounter:missedBlocksCounter];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeValidatorSigningInformation *rctImpl = (RCTCoreLGCosmosLikeValidatorSigningInformation *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorSigningInformation"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeValidatorSigningInformation", @"uid" : uuid };
    if (result)
    {
        resolve(result);
    }
}

RCT_REMAP_METHOD(getStartHeight, getStartHeight:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorSigningInformation *objcImpl = (LGCosmosLikeValidatorSigningInformation *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.startHeight)};
    resolve(result);
}

RCT_REMAP_METHOD(getIndexOffset, getIndexOffset:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorSigningInformation *objcImpl = (LGCosmosLikeValidatorSigningInformation *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.indexOffset)};
    resolve(result);
}

RCT_REMAP_METHOD(getJailedUntil, getJailedUntil:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorSigningInformation *objcImpl = (LGCosmosLikeValidatorSigningInformation *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.jailedUntil};
    resolve(result);
}

RCT_REMAP_METHOD(getTombstoned, getTombstoned:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorSigningInformation *objcImpl = (LGCosmosLikeValidatorSigningInformation *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @(objcImpl.tombstoned)};
    resolve(result);
}

RCT_REMAP_METHOD(getMissedBlocksCounter, getMissedBlocksCounter:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeValidatorSigningInformation *objcImpl = (LGCosmosLikeValidatorSigningInformation *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : @((int)objcImpl.missedBlocksCounter)};
    resolve(result);
}

@end
