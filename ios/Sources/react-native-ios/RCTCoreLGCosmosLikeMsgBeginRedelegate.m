// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "RCTCoreLGCosmosLikeMsgBeginRedelegate.h"
#import "LGCosmosLikeMsgBeginRedelegate.h"

@implementation RCTCoreLGCosmosLikeMsgBeginRedelegate

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeMsgBeginRedelegate)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithDelegatorAddress:(nonnull NSString *)delegatorAddress
                         validatorSourceAddress:(nonnull NSString *)validatorSourceAddress
                    validatorDestinationAddress:(nonnull NSString *)validatorDestinationAddress
                                         amount:(NSDictionary *)amount withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    RCTCoreLGCosmosLikeAmount *rctParam_amount = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
    LGCosmosLikeAmount *field_3 = (LGCosmosLikeAmount *)[rctParam_amount.objcImplementations objectForKey:amount[@"uid"]];
    [implementationsData setObject:amount[@"uid"] forKey:@"amount"];


    LGCosmosLikeMsgBeginRedelegate * finalResult = [[LGCosmosLikeMsgBeginRedelegate alloc] initWithDelegatorAddress:delegatorAddress validatorSourceAddress:validatorSourceAddress validatorDestinationAddress:validatorDestinationAddress amount:field_3];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgBeginRedelegate *rctImpl = (RCTCoreLGCosmosLikeMsgBeginRedelegate *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgBeginRedelegate"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgBeginRedelegate", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGCosmosLikeMsgBeginRedelegate *objcImpl = (LGCosmosLikeMsgBeginRedelegate *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_3 = objcImpl.amount;
    NSString *field_3_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeAmount *rctImpl_field_3 = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
    NSArray *field_3_array = [[NSArray alloc] initWithObjects:field_3, field_3_uuid, nil];
    [rctImpl_field_3 baseSetObject:field_3_array];
    NSDictionary *converted_field_3 = @{@"type" : @"CoreLGCosmosLikeAmount", @"uid" : field_3_uuid };
    [implementationsData setObject:converted_field_3 forKey:@"amount"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getDelegatorAddress, getDelegatorAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgBeginRedelegate *objcImpl = (LGCosmosLikeMsgBeginRedelegate *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.delegatorAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getValidatorSourceAddress, getValidatorSourceAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgBeginRedelegate *objcImpl = (LGCosmosLikeMsgBeginRedelegate *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.validatorSourceAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getValidatorDestinationAddress, getValidatorDestinationAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgBeginRedelegate *objcImpl = (LGCosmosLikeMsgBeginRedelegate *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.validatorDestinationAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getAmount, getAmount:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"amount"];
    resolve(result);
}

@end
