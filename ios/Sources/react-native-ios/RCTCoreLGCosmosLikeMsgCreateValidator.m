// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

#import "RCTCoreLGCosmosLikeMsgCreateValidator.h"
#import "LGCosmosLikeMsgCreateValidator.h"

@implementation RCTCoreLGCosmosLikeMsgCreateValidator

//Export module
RCT_EXPORT_MODULE(RCTCoreLGCosmosLikeMsgCreateValidator)

@synthesize bridge = _bridge;

+ (BOOL)requiresMainQueueSetup
{
    return NO;
}
RCT_REMAP_METHOD(release, release:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseRelease:currentInstance withResolver: resolve rejecter:reject];
}
RCT_REMAP_METHOD(log, logWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseLogWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(flush, flushWithResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseFlushWithResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(isNull, isNull:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject)
{
    [self baseIsNull:currentInstance withResolver:resolve rejecter:reject];
}
RCT_REMAP_METHOD(init, initWithDescr:(NSDictionary *)descr
                          commission:(NSDictionary *)commission
                   minSelfDelegation:(nonnull NSString *)minSelfDelegation
                    delegatorAddress:(nonnull NSString *)delegatorAddress
                    validatorAddress:(nonnull NSString *)validatorAddress
                              pubkey:(nonnull NSString *)pubkey
                               value:(NSDictionary *)value withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    RCTCoreLGCosmosLikeValidatorDescription *rctParam_descr = (RCTCoreLGCosmosLikeValidatorDescription *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorDescription"];
    LGCosmosLikeValidatorDescription *field_0 = (LGCosmosLikeValidatorDescription *)[rctParam_descr.objcImplementations objectForKey:descr[@"uid"]];
    [implementationsData setObject:descr[@"uid"] forKey:@"descr"];
    RCTCoreLGCosmosLikeValidatorCommission *rctParam_commission = (RCTCoreLGCosmosLikeValidatorCommission *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorCommission"];
    LGCosmosLikeValidatorCommission *field_1 = (LGCosmosLikeValidatorCommission *)[rctParam_commission.objcImplementations objectForKey:commission[@"uid"]];
    [implementationsData setObject:commission[@"uid"] forKey:@"commission"];
    RCTCoreLGCosmosLikeAmount *rctParam_value = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
    LGCosmosLikeAmount *field_6 = (LGCosmosLikeAmount *)[rctParam_value.objcImplementations objectForKey:value[@"uid"]];
    [implementationsData setObject:value[@"uid"] forKey:@"value"];


    LGCosmosLikeMsgCreateValidator * finalResult = [[LGCosmosLikeMsgCreateValidator alloc] initWithDescr:field_0 commission:field_1 minSelfDelegation:minSelfDelegation delegatorAddress:delegatorAddress validatorAddress:validatorAddress pubkey:pubkey value:field_6];
    NSString *uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeMsgCreateValidator *rctImpl = (RCTCoreLGCosmosLikeMsgCreateValidator *)[self.bridge moduleForName:@"CoreLGCosmosLikeMsgCreateValidator"];
    NSArray *finalResultArray = [[NSArray alloc] initWithObjects:finalResult, uuid, nil];
    [rctImpl baseSetObject:finalResultArray];
    NSDictionary *result = @{@"type" : @"CoreLGCosmosLikeMsgCreateValidator", @"uid" : uuid };
    if (result)
    {
        [self.implementationsData setObject:implementationsData forKey:uuid];
        resolve(result);
    }
}

-(void)mapImplementationsData:(NSDictionary *)currentInstance
{
    LGCosmosLikeMsgCreateValidator *objcImpl = (LGCosmosLikeMsgCreateValidator *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSMutableDictionary *implementationsData = [[NSMutableDictionary alloc] init];
    id field_0 = objcImpl.descr;
    NSString *field_0_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeValidatorDescription *rctImpl_field_0 = (RCTCoreLGCosmosLikeValidatorDescription *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorDescription"];
    NSArray *field_0_array = [[NSArray alloc] initWithObjects:field_0, field_0_uuid, nil];
    [rctImpl_field_0 baseSetObject:field_0_array];
    NSDictionary *converted_field_0 = @{@"type" : @"CoreLGCosmosLikeValidatorDescription", @"uid" : field_0_uuid };
    [implementationsData setObject:converted_field_0 forKey:@"descr"];
    id field_1 = objcImpl.commission;
    NSString *field_1_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeValidatorCommission *rctImpl_field_1 = (RCTCoreLGCosmosLikeValidatorCommission *)[self.bridge moduleForName:@"CoreLGCosmosLikeValidatorCommission"];
    NSArray *field_1_array = [[NSArray alloc] initWithObjects:field_1, field_1_uuid, nil];
    [rctImpl_field_1 baseSetObject:field_1_array];
    NSDictionary *converted_field_1 = @{@"type" : @"CoreLGCosmosLikeValidatorCommission", @"uid" : field_1_uuid };
    [implementationsData setObject:converted_field_1 forKey:@"commission"];
    id field_6 = objcImpl.value;
    NSString *field_6_uuid = [[NSUUID UUID] UUIDString];
    RCTCoreLGCosmosLikeAmount *rctImpl_field_6 = (RCTCoreLGCosmosLikeAmount *)[self.bridge moduleForName:@"CoreLGCosmosLikeAmount"];
    NSArray *field_6_array = [[NSArray alloc] initWithObjects:field_6, field_6_uuid, nil];
    [rctImpl_field_6 baseSetObject:field_6_array];
    NSDictionary *converted_field_6 = @{@"type" : @"CoreLGCosmosLikeAmount", @"uid" : field_6_uuid };
    [implementationsData setObject:converted_field_6 forKey:@"value"];
    [self.implementationsData setObject:implementationsData forKey:currentInstance[@"uid"]];
}
RCT_REMAP_METHOD(getDescr, getDescr:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"descr"];
    resolve(result);
}

RCT_REMAP_METHOD(getCommission, getCommission:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"commission"];
    resolve(result);
}

RCT_REMAP_METHOD(getMinSelfDelegation, getMinSelfDelegation:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgCreateValidator *objcImpl = (LGCosmosLikeMsgCreateValidator *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.minSelfDelegation};
    resolve(result);
}

RCT_REMAP_METHOD(getDelegatorAddress, getDelegatorAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgCreateValidator *objcImpl = (LGCosmosLikeMsgCreateValidator *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.delegatorAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getValidatorAddress, getValidatorAddress:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgCreateValidator *objcImpl = (LGCosmosLikeMsgCreateValidator *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.validatorAddress};
    resolve(result);
}

RCT_REMAP_METHOD(getPubkey, getPubkey:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    LGCosmosLikeMsgCreateValidator *objcImpl = (LGCosmosLikeMsgCreateValidator *)[self.objcImplementations objectForKey:currentInstance[@"uid"]];
    NSDictionary *result = @{@"value" : objcImpl.pubkey};
    resolve(result);
}

RCT_REMAP_METHOD(getValue, getValue:(NSDictionary *)currentInstance withResolver:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)rejecter)
{
    NSDictionary *data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    if (!data)
    {
        [self mapImplementationsData:currentInstance];
        data = (NSDictionary *)[self.implementationsData objectForKey:currentInstance[@"uid"]];
    }
    NSDictionary *result = [data objectForKey:@"value"];
    resolve(result);
}

@end
