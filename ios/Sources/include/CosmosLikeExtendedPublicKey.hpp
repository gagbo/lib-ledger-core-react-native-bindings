// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#ifndef DJINNI_GENERATED_COSMOSLIKEEXTENDEDPUBLICKEY_HPP
#define DJINNI_GENERATED_COSMOSLIKEEXTENDEDPUBLICKEY_HPP

#include <cstdint>
#include <memory>
#include <string>
#include <vector>

namespace ledger { namespace core { namespace api {

class CosmosLikeAddress;

/** The xPUB definition for Cosmos. */
class CosmosLikeExtendedPublicKey {
public:
    virtual ~CosmosLikeExtendedPublicKey() {}

    /** Derive an address from an xPUB and a path. */
    virtual std::shared_ptr<CosmosLikeAddress> derive(const std::string & path) = 0;

    /** Derive a public key from an xPUB and a path. */
    virtual std::vector<uint8_t> derivePublicKey(const std::string & path) = 0;

    /** Derive a shorten version of a public key (SHA256 + RIPEMD160) from an xPUB and a path. */
    virtual std::vector<uint8_t> deriveHash160(const std::string & path) = 0;

    /** Get the publicKey in bech32 representatrion. */
    virtual std::string toBech32() = 0;

    /** Get the publicKey in base58 representatrion. */
    virtual std::string toBase58() = 0;

    /** Get the root path of the xPUB. */
    virtual std::string getRootPath() = 0;
};

} } }  // namespace ledger::core::api
#endif //DJINNI_GENERATED_COSMOSLIKEEXTENDEDPUBLICKEY_HPP
