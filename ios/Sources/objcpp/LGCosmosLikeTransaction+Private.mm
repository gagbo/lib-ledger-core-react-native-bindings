// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#import "LGCosmosLikeTransaction+Private.h"
#import "LGCosmosLikeTransaction.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "LGAmount+Private.h"
#import "LGBigInt+Private.h"
#import "LGCosmosLikeMessage+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface LGCosmosLikeTransaction ()

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::CosmosLikeTransaction>&)cppRef;

@end

@implementation LGCosmosLikeTransaction {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ledger::core::api::CosmosLikeTransaction>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ledger::core::api::CosmosLikeTransaction>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSDate *)getDate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getDate();
        return ::djinni::Date::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)getFee {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFee();
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGAmount *)getGas {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getGas();
        return ::djinni_generated::Amount::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBigInt *)getGasUsed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getGasUsed();
        return ::djinni_generated::BigInt::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable LGBigInt *)getGasWanted {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getGasWanted();
        return ::djinni_generated::BigInt::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getHash {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getHash();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getMemo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMemo();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<LGCosmosLikeMessage *> *)getMessages {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMessages();
        return ::djinni::List<::djinni_generated::CosmosLikeMessage>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSData *)getSigningPubKey {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSigningPubKey();
        return ::djinni::Binary::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)serializeForSignature {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->serializeForSignature();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSignature:(nonnull NSData *)rSignature
          sSignature:(nonnull NSData *)sSignature {
    try {
        _cppRefHandle.get()->setSignature(::djinni::Binary::toCpp(rSignature),
                                          ::djinni::Binary::toCpp(sSignature));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDERSignature:(nonnull NSData *)signature {
    try {
        _cppRefHandle.get()->setDERSignature(::djinni::Binary::toCpp(signature));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)serializeForBroadcast:(nonnull NSString *)mode {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->serializeForBroadcast(::djinni::String::toCpp(mode));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto CosmosLikeTransaction::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto CosmosLikeTransaction::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<LGCosmosLikeTransaction>(cpp);
}

}  // namespace djinni_generated

@end
