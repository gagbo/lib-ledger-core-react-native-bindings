// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.Amount;
import co.ledger.core.CosmosLikeMessage;
import co.ledger.core.CosmosLikeTransaction;
import co.ledger.core.CosmosLikeTransactionBuilder;
import co.ledger.core.CosmosLikeTransactionCallback;
import co.ledger.core.Currency;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreCosmosLikeTransactionBuilder")
public class RCTCoreCosmosLikeTransactionBuilder extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, CosmosLikeTransactionBuilder> javaObjects;
    public Map<String, CosmosLikeTransactionBuilder> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosLikeTransactionBuilder(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosLikeTransactionBuilder>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosLikeTransactionBuilder";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosLikeTransactionBuilder", "First parameter of RCTCoreCosmosLikeTransactionBuilder::release should be an instance of RCTCoreCosmosLikeTransactionBuilder");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosLikeTransactionBuilder> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /**
     * Set memo
     * @param memo the memo to set
     */
    @ReactMethod
    public void setMemo(ReadableMap currentInstance, String memo, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setMemo(memo);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set sequence
     * @param sequence The sequence to set
     */
    @ReactMethod
    public void setSequence(ReadableMap currentInstance, String sequence, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setSequence(sequence);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set accountNumber
     * @param accountNumber The accountNumber to set
     */
    @ReactMethod
    public void setAccountNumber(ReadableMap currentInstance, String accountNumber, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setAccountNumber(accountNumber);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Add a new message in the internal range of messages
     * @param msg a new message
     */
    @ReactMethod
    public void addMessage(ReadableMap currentInstance, ReadableMap msg, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.addMessage(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set gas price
     * @param gas The gas to set
     */
    @ReactMethod
    public void setGas(ReadableMap currentInstance, ReadableMap gas, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_gas = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_gas.getJavaObjects().get(gas.getString("uid"));
            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setGas(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set gas Adjusment factor when estimating gas
     * @param gasAdjustment The (multiplicative) factor for gas evaluation
     */
    @ReactMethod
    public void setGasAdjustment(ReadableMap currentInstance, double gasAdjustment, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setGasAdjustment(gasAdjustment);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Set fee
     * Here the fee represents the gas price multiplied by the gas used
     * @param fee The fee to set
     */
    @ReactMethod
    public void setFee(ReadableMap currentInstance, ReadableMap fee, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmount rctParam_fee = this.reactContext.getNativeModule(RCTCoreAmount.class);
            Amount javaParam_0 = rctParam_fee.getJavaObjects().get(fee.getString("uid"));
            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.setFee(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Build a transaction from the given builder parameters. */
    @ReactMethod
    public void build(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeTransactionCallback javaParam_0 = RCTCoreCosmosLikeTransactionCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.build(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Creates a clone of this builder.
     * @return A copy of the current builder instance.
     */
    @ReactMethod
    public void clone(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.clone();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Reset the current instance to its initial state */
    @ReactMethod
    public void reset(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeTransactionBuilder currentInstanceObj = this.javaObjects.get(sUid);

            currentInstanceObj.reset();
            promise.resolve(0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void parseRawUnsignedTransaction(ReadableMap currency, String rawTransaction, Promise promise) {
        try
        {
            RCTCoreCurrency rctParam_currency = this.reactContext.getNativeModule(RCTCoreCurrency.class);
            Currency javaParam_0 = rctParam_currency.getJavaObjects().get(currency.getString("uid"));
            CosmosLikeTransaction javaResult = CosmosLikeTransactionBuilder.parseRawUnsignedTransaction(javaParam_0, rawTransaction);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransaction rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransaction.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransaction");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void parseRawSignedTransaction(ReadableMap currency, String rawTransaction, Promise promise) {
        try
        {
            RCTCoreCurrency rctParam_currency = this.reactContext.getNativeModule(RCTCoreCurrency.class);
            Currency javaParam_0 = rctParam_currency.getJavaObjects().get(currency.getString("uid"));
            CosmosLikeTransaction javaResult = CosmosLikeTransactionBuilder.parseRawSignedTransaction(javaParam_0, rawTransaction);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransaction rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransaction.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransaction");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
