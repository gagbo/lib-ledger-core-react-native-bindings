// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package com.ledger.reactnative;

import co.ledger.core.CosmosLikeMsgEditValidator;
import co.ledger.core.CosmosLikeValidatorDescription;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreCosmosLikeMsgEditValidator")
public class RCTCoreCosmosLikeMsgEditValidator extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, CosmosLikeMsgEditValidator> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, CosmosLikeMsgEditValidator> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosLikeMsgEditValidator(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosLikeMsgEditValidator>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosLikeMsgEditValidator";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosLikeMsgEditValidator", "First parameter of RCTCoreCosmosLikeMsgEditValidator::release should be an instance of RCTCoreCosmosLikeMsgEditValidator");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosLikeMsgEditValidator> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(Optional<ReadableMap> descr, String validatorAddress, String commissionRate, String minSelfDelegation, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        RCTCoreCosmosLikeValidatorDescription rctParam_descr = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorDescription.class);
        CosmosLikeValidatorDescription javaParam_0 = rctParam_descr.getJavaObjects().get(descr.get().getString("uid"));
        implementationsData.putString("descr", descr.get().getString("uid"));
        CosmosLikeMsgEditValidator javaResult = new CosmosLikeMsgEditValidator(javaParam_0, validatorAddress, commissionRate, minSelfDelegation);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreCosmosLikeMsgEditValidator");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        CosmosLikeMsgEditValidator javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        CosmosLikeValidatorDescription field_0 = javaImpl.getDescr();
        String field_0_uuid = UUID.randomUUID().toString();
        RCTCoreCosmosLikeValidatorDescription rctImpl_field_0 = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorDescription.class);
        rctImpl_field_0.getJavaObjects().put(field_0_uuid, field_0);
        WritableNativeMap converted_field_0 = new WritableNativeMap();
        converted_field_0.putString("type","RCTCoreCosmosLikeValidatorDescription");
        converted_field_0.putString("uid",field_0_uuid);
        implementationsData.putMap("descr", converted_field_0);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getDescr(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("descr"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgEditValidator::getDescr", "First parameter of RCTCoreCosmosLikeMsgEditValidator::getDescr should be an instance of RCTCoreCosmosLikeMsgEditValidator");
        }
    }

    @ReactMethod
    public void getValidatorAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgEditValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getValidatorAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgEditValidator::getValidatorAddress", "First parameter of RCTCoreCosmosLikeMsgEditValidator::getValidatorAddress should be an instance of RCTCoreCosmosLikeMsgEditValidator");
        }
    }

    @ReactMethod
    public void getCommissionRate(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgEditValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getCommissionRate();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgEditValidator::getCommissionRate", "First parameter of RCTCoreCosmosLikeMsgEditValidator::getCommissionRate should be an instance of RCTCoreCosmosLikeMsgEditValidator");
        }
    }

    @ReactMethod
    public void getMinSelfDelegation(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgEditValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getMinSelfDelegation();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgEditValidator::getMinSelfDelegation", "First parameter of RCTCoreCosmosLikeMsgEditValidator::getMinSelfDelegation should be an instance of RCTCoreCosmosLikeMsgEditValidator");
        }
    }

}
