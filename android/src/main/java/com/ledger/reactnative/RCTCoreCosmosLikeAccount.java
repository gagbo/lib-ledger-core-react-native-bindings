// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.AmountCallback;
import co.ledger.core.BigIntCallback;
import co.ledger.core.CosmosGasLimitRequest;
import co.ledger.core.CosmosLikeAccount;
import co.ledger.core.CosmosLikeDelegationListCallback;
import co.ledger.core.CosmosLikeRedelegationListCallback;
import co.ledger.core.CosmosLikeRewardListCallback;
import co.ledger.core.CosmosLikeTransaction;
import co.ledger.core.CosmosLikeTransactionBuilder;
import co.ledger.core.CosmosLikeUnbondingListCallback;
import co.ledger.core.CosmosLikeValidatorCallback;
import co.ledger.core.CosmosLikeValidatorListCallback;
import co.ledger.core.StringCallback;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/**Class representing a Cosmos account */
@ReactModule(name = "RCTCoreCosmosLikeAccount")
public class RCTCoreCosmosLikeAccount extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, CosmosLikeAccount> javaObjects;
    public Map<String, CosmosLikeAccount> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosLikeAccount(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosLikeAccount>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosLikeAccount";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosLikeAccount", "First parameter of RCTCoreCosmosLikeAccount::release should be an instance of RCTCoreCosmosLikeAccount");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosLikeAccount> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void broadcastRawTransaction(ReadableMap currentInstance, String transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreStringCallback javaParam_1 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.broadcastRawTransaction(transaction, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void broadcastTransaction(ReadableMap currentInstance, ReadableMap transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeTransaction rctParam_transaction = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransaction.class);
            CosmosLikeTransaction javaParam_0 = rctParam_transaction.getJavaObjects().get(transaction.getString("uid"));
            RCTCoreStringCallback javaParam_1 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.broadcastTransaction(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void buildTransaction(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeTransactionBuilder javaResult = currentInstanceObj.buildTransaction();

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeTransactionBuilder rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransactionBuilder.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeTransactionBuilder");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get estimated gas limit to set so the transaction will succeed */
    @ReactMethod
    public void getEstimatedGasLimit(ReadableMap currentInstance, ReadableMap transaction, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeTransaction rctParam_transaction = this.reactContext.getNativeModule(RCTCoreCosmosLikeTransaction.class);
            CosmosLikeTransaction javaParam_0 = rctParam_transaction.getJavaObjects().get(transaction.getString("uid"));
            RCTCoreBigIntCallback javaParam_1 = RCTCoreBigIntCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getEstimatedGasLimit(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Ask the account to estimate the gas for a building transaction
     * This function uses the underlying infrastructure to simulate the gas
     * needed for the transaction as requested until now.
     * @param request is the CosmosGasLimitRequest for the specifics of the simulation
     */
    @ReactMethod
    public void estimateGas(ReadableMap currentInstance, ReadableMap buildingTx, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosGasLimitRequest rctParam_buildingTx = this.reactContext.getNativeModule(RCTCoreCosmosGasLimitRequest.class);
            CosmosGasLimitRequest javaParam_0 = rctParam_buildingTx.getJavaObjects().get(buildingTx.getString("uid"));
            RCTCoreBigIntCallback javaParam_1 = RCTCoreBigIntCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.estimateGas(javaParam_0, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get the latest active validator set */
    @ReactMethod
    public void getLatestValidatorSet(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeValidatorListCallback javaParam_0 = RCTCoreCosmosLikeValidatorListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getLatestValidatorSet(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get information about one validator */
    @ReactMethod
    public void getValidatorInfo(ReadableMap currentInstance, String validatorAddress, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeValidatorCallback javaParam_1 = RCTCoreCosmosLikeValidatorCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getValidatorInfo(validatorAddress, javaParam_1);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get Total balance of account. Sum of spendable, delegated, pending rewards, and pending unbondings */
    @ReactMethod
    public void getTotalBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getTotalBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get Total amount in delegation of account. */
    @ReactMethod
    public void getDelegatedBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getDelegatedBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get Total pending rewards of account. */
    @ReactMethod
    public void getPendingRewardsBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getPendingRewardsBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get Total unbondings funds of account. */
    @ReactMethod
    public void getUnbondingBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getUnbondingBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /** Get Total spendable balance of account. */
    @ReactMethod
    public void getSpendableBalance(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreAmountCallback javaParam_0 = RCTCoreAmountCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getSpendableBalance(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getDelegations(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeDelegationListCallback javaParam_0 = RCTCoreCosmosLikeDelegationListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getDelegations(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getPendingRewards(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeRewardListCallback javaParam_0 = RCTCoreCosmosLikeRewardListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getPendingRewards(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getUnbondings(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeUnbondingListCallback javaParam_0 = RCTCoreCosmosLikeUnbondingListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getUnbondings(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    @ReactMethod
    public void getRedelegations(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreCosmosLikeRedelegationListCallback javaParam_0 = RCTCoreCosmosLikeRedelegationListCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getRedelegations(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the current account sequence (synchronize to get latest value)
     * string like "14"
     */
    @ReactMethod
    public void getSequence(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreStringCallback javaParam_0 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getSequence(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the account number
     * String like "15"
     */
    @ReactMethod
    public void getAccountNumber(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreStringCallback javaParam_0 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getAccountNumber(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get the rewards withdrawal address
     * String Bech32 encoded string
     */
    @ReactMethod
    public void getWithdrawAddress(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeAccount currentInstanceObj = this.javaObjects.get(sUid);

            RCTCoreStringCallback javaParam_0 = RCTCoreStringCallback.initWithPromise(promise, this.reactContext);
            currentInstanceObj.getWithdrawAddress(javaParam_0);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
