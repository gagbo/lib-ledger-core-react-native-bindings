// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package com.ledger.reactnative;

import co.ledger.core.CosmosLikeAmount;
import co.ledger.core.CosmosLikeMsgCreateValidator;
import co.ledger.core.CosmosLikeValidatorCommission;
import co.ledger.core.CosmosLikeValidatorDescription;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreCosmosLikeMsgCreateValidator")
public class RCTCoreCosmosLikeMsgCreateValidator extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, CosmosLikeMsgCreateValidator> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, CosmosLikeMsgCreateValidator> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosLikeMsgCreateValidator(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosLikeMsgCreateValidator>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosLikeMsgCreateValidator";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosLikeMsgCreateValidator", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::release should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosLikeMsgCreateValidator> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(ReadableMap descr, ReadableMap commission, String minSelfDelegation, String delegatorAddress, String validatorAddress, String pubkey, ReadableMap value, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        RCTCoreCosmosLikeValidatorDescription rctParam_descr = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorDescription.class);
        CosmosLikeValidatorDescription javaParam_0 = rctParam_descr.getJavaObjects().get(descr.getString("uid"));
        implementationsData.putString("descr", descr.getString("uid"));
        RCTCoreCosmosLikeValidatorCommission rctParam_commission = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorCommission.class);
        CosmosLikeValidatorCommission javaParam_1 = rctParam_commission.getJavaObjects().get(commission.getString("uid"));
        implementationsData.putString("commission", commission.getString("uid"));
        RCTCoreCosmosLikeAmount rctParam_value = this.reactContext.getNativeModule(RCTCoreCosmosLikeAmount.class);
        CosmosLikeAmount javaParam_6 = rctParam_value.getJavaObjects().get(value.getString("uid"));
        implementationsData.putString("value", value.getString("uid"));
        CosmosLikeMsgCreateValidator javaResult = new CosmosLikeMsgCreateValidator(javaParam_0, javaParam_1, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, javaParam_6);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreCosmosLikeMsgCreateValidator");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        CosmosLikeMsgCreateValidator javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        CosmosLikeValidatorDescription field_0 = javaImpl.getDescr();
        String field_0_uuid = UUID.randomUUID().toString();
        RCTCoreCosmosLikeValidatorDescription rctImpl_field_0 = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorDescription.class);
        rctImpl_field_0.getJavaObjects().put(field_0_uuid, field_0);
        WritableNativeMap converted_field_0 = new WritableNativeMap();
        converted_field_0.putString("type","RCTCoreCosmosLikeValidatorDescription");
        converted_field_0.putString("uid",field_0_uuid);
        implementationsData.putMap("descr", converted_field_0);
        CosmosLikeValidatorCommission field_1 = javaImpl.getCommission();
        String field_1_uuid = UUID.randomUUID().toString();
        RCTCoreCosmosLikeValidatorCommission rctImpl_field_1 = this.reactContext.getNativeModule(RCTCoreCosmosLikeValidatorCommission.class);
        rctImpl_field_1.getJavaObjects().put(field_1_uuid, field_1);
        WritableNativeMap converted_field_1 = new WritableNativeMap();
        converted_field_1.putString("type","RCTCoreCosmosLikeValidatorCommission");
        converted_field_1.putString("uid",field_1_uuid);
        implementationsData.putMap("commission", converted_field_1);
        CosmosLikeAmount field_6 = javaImpl.getValue();
        String field_6_uuid = UUID.randomUUID().toString();
        RCTCoreCosmosLikeAmount rctImpl_field_6 = this.reactContext.getNativeModule(RCTCoreCosmosLikeAmount.class);
        rctImpl_field_6.getJavaObjects().put(field_6_uuid, field_6);
        WritableNativeMap converted_field_6 = new WritableNativeMap();
        converted_field_6.putString("type","RCTCoreCosmosLikeAmount");
        converted_field_6.putString("uid",field_6_uuid);
        implementationsData.putMap("value", converted_field_6);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getDescr(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("descr"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getDescr", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getDescr should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getCommission(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("commission"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getCommission", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getCommission should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getMinSelfDelegation(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgCreateValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getMinSelfDelegation();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getMinSelfDelegation", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getMinSelfDelegation should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getDelegatorAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgCreateValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getDelegatorAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getDelegatorAddress", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getDelegatorAddress should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getValidatorAddress(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgCreateValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getValidatorAddress();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getValidatorAddress", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getValidatorAddress should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getPubkey(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosLikeMsgCreateValidator javaObj = this.javaObjects.get(uid);
            String result = javaObj.getPubkey();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getPubkey", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getPubkey should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

    @ReactMethod
    public void getValue(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            WritableNativeMap result = new WritableNativeMap();
            result.merge(data.getMap("value"));
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosLikeMsgCreateValidator::getValue", "First parameter of RCTCoreCosmosLikeMsgCreateValidator::getValue should be an instance of RCTCoreCosmosLikeMsgCreateValidator");
        }
    }

}
