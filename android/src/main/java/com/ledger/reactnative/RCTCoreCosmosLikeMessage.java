// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from messages.djinni

package com.ledger.reactnative;

import co.ledger.core.CosmosLikeMessage;
import co.ledger.core.CosmosLikeMsgBeginRedelegate;
import co.ledger.core.CosmosLikeMsgCreateValidator;
import co.ledger.core.CosmosLikeMsgDelegate;
import co.ledger.core.CosmosLikeMsgDeposit;
import co.ledger.core.CosmosLikeMsgEditValidator;
import co.ledger.core.CosmosLikeMsgMultiSend;
import co.ledger.core.CosmosLikeMsgSend;
import co.ledger.core.CosmosLikeMsgSetWithdrawAddress;
import co.ledger.core.CosmosLikeMsgSubmitProposal;
import co.ledger.core.CosmosLikeMsgType;
import co.ledger.core.CosmosLikeMsgUndelegate;
import co.ledger.core.CosmosLikeMsgUnjail;
import co.ledger.core.CosmosLikeMsgVote;
import co.ledger.core.CosmosLikeMsgWithdrawDelegationReward;
import co.ledger.core.CosmosLikeMsgWithdrawDelegatorReward;
import co.ledger.core.CosmosLikeMsgWithdrawValidatorCommission;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

@ReactModule(name = "RCTCoreCosmosLikeMessage")
public class RCTCoreCosmosLikeMessage extends ReactContextBaseJavaModule {

    private final ReactApplicationContext reactContext;
    private Map<String, CosmosLikeMessage> javaObjects;
    public Map<String, CosmosLikeMessage> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosLikeMessage(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosLikeMessage>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosLikeMessage";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosLikeMessage", "First parameter of RCTCoreCosmosLikeMessage::release should be an instance of RCTCoreCosmosLikeMessage");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosLikeMessage> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    /**
     * Get type
     * @return CosmosLikeMsgType a message type
     */
    @ReactMethod
    public void getMessageType(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeMessage currentInstanceObj = this.javaObjects.get(sUid);

            CosmosLikeMsgType javaResult = currentInstanceObj.getMessageType();
            WritableNativeMap result = new WritableNativeMap();
            int finalJavaResult = javaResult.ordinal();
            result.putInt("value", finalJavaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get type
     * @return string a message type in string format
     */
    @ReactMethod
    public void getRawMessageType(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeMessage currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getRawMessageType();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get type
     * @return bool if the message was successfully executed on the chain
     */
    @ReactMethod
    public void getSuccess(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeMessage currentInstanceObj = this.javaObjects.get(sUid);

            boolean javaResult = currentInstanceObj.getSuccess();
            WritableNativeMap result = new WritableNativeMap();
            result.putBoolean("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get type
     * @return string the log of the message execution (useful when getSuccess() == false)
     */
    @ReactMethod
    public void getLog(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeMessage currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getLog();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Get message index in the tx
     * @return string the 0-based index in the tx or "fees" for the fees in the tx
     */
    @ReactMethod
    public void getIndex(ReadableMap currentInstance, Promise promise) {
        try
        {
            String sUid = currentInstance.getString("uid");

            CosmosLikeMessage currentInstanceObj = this.javaObjects.get(sUid);

            String javaResult = currentInstanceObj.getIndex();
            WritableNativeMap result = new WritableNativeMap();
            result.putString("value", javaResult);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgSend into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgSend(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgSend rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSend.class);
            CosmosLikeMsgSend javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgSend(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgSend
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDelegate the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgSend(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgSend javaResult = CosmosLikeMessage.unwrapMsgSend(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgSend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgSend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgDelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgDelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgDelegate rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgDelegate.class);
            CosmosLikeMsgDelegate javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgDelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgDelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDelegate the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgDelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgDelegate javaResult = CosmosLikeMessage.unwrapMsgDelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgDelegate rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgDelegate.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgDelegate");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgUndelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgUndelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgUndelegate rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgUndelegate.class);
            CosmosLikeMsgUndelegate javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgUndelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgUndelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgUndelegate the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgUndelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgUndelegate javaResult = CosmosLikeMessage.unwrapMsgUndelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgUndelegate rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgUndelegate.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgUndelegate");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgBeginRedelegate into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgBeginRedelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgBeginRedelegate rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgBeginRedelegate.class);
            CosmosLikeMsgBeginRedelegate javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgBeginRedelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgBeginRedelegate
     * @param msg The message to unwrap
     * @return CosmosLikeMsgBeginRedelegate the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgBeginRedelegate(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgBeginRedelegate javaResult = CosmosLikeMessage.unwrapMsgBeginRedelegate(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgBeginRedelegate rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgBeginRedelegate.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgBeginRedelegate");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgSubmitProposal into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgSubmitProposal(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgSubmitProposal rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSubmitProposal.class);
            CosmosLikeMsgSubmitProposal javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgSubmitProposal(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgSubmitProposal
     * @param msg The message to unwrap
     * @return CosmosLikeMsgSubmitProposal the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgSubmitProposal(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgSubmitProposal javaResult = CosmosLikeMessage.unwrapMsgSubmitProposal(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgSubmitProposal rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSubmitProposal.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgSubmitProposal");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgVote into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgVote(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgVote rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgVote.class);
            CosmosLikeMsgVote javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgVote(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgVote
     * @param msg The message to unwrap
     * @return CosmosLikeMsgVote the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgVote(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgVote javaResult = CosmosLikeMessage.unwrapMsgVote(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgVote rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgVote.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgVote");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgDeposit into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgDeposit(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgDeposit rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgDeposit.class);
            CosmosLikeMsgDeposit javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgDeposit(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgDeposit
     * @param msg The message to unwrap
     * @return CosmosLikeMsgDeposit the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgDeposit(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgDeposit javaResult = CosmosLikeMessage.unwrapMsgDeposit(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgDeposit rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgDeposit.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgDeposit");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgWithdrawDelegationReward into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgWithdrawDelegationReward(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgWithdrawDelegationReward rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawDelegationReward.class);
            CosmosLikeMsgWithdrawDelegationReward javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgWithdrawDelegationReward(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawDelegationReward
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawDelegationReward the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgWithdrawDelegationReward(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgWithdrawDelegationReward javaResult = CosmosLikeMessage.unwrapMsgWithdrawDelegationReward(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgWithdrawDelegationReward rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawDelegationReward.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgWithdrawDelegationReward");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgMultiSend into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgMultiSend(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgMultiSend rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgMultiSend.class);
            CosmosLikeMsgMultiSend javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgMultiSend(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgMultiSend
     * @param msg The message to unwrap
     * @return CosmosLikeMsgMultiSend the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgMultiSend(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgMultiSend javaResult = CosmosLikeMessage.unwrapMsgMultiSend(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgMultiSend rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgMultiSend.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgMultiSend");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgCreateValidator into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgCreateValidator(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgCreateValidator rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgCreateValidator.class);
            CosmosLikeMsgCreateValidator javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgCreateValidator(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgCreateValidator
     * @param msg The message to unwrap
     * @return CosmosLikeMsgCreateValidator the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgCreateValidator(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgCreateValidator javaResult = CosmosLikeMessage.unwrapMsgCreateValidator(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgCreateValidator rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgCreateValidator.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgCreateValidator");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgEditValidator into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgEditValidator(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgEditValidator rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgEditValidator.class);
            CosmosLikeMsgEditValidator javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgEditValidator(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgEditValidator
     * @param msg The message to unwrap
     * @return CosmosLikeMsgEditValidator the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgEditValidator(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgEditValidator javaResult = CosmosLikeMessage.unwrapMsgEditValidator(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgEditValidator rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgEditValidator.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgEditValidator");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgSetWithdrawAddress into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgSetWithdrawAddress(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgSetWithdrawAddress rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSetWithdrawAddress.class);
            CosmosLikeMsgSetWithdrawAddress javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgSetWithdrawAddress(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgSetWithdrawAddress
     * @param msg The message to unwrap
     * @return CosmosLikeMsgSetWithdrawAddress the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgSetWithdrawAddress(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgSetWithdrawAddress javaResult = CosmosLikeMessage.unwrapMsgSetWithdrawAddress(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgSetWithdrawAddress rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgSetWithdrawAddress.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgSetWithdrawAddress");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgWithdrawDelegatorReward into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgWithdrawDelegatorReward(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgWithdrawDelegatorReward rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawDelegatorReward.class);
            CosmosLikeMsgWithdrawDelegatorReward javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgWithdrawDelegatorReward(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawDelegatorReward
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawDelegatorReward the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgWithdrawDelegatorReward(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgWithdrawDelegatorReward javaResult = CosmosLikeMessage.unwrapMsgWithdrawDelegatorReward(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgWithdrawDelegatorReward rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawDelegatorReward.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgWithdrawDelegatorReward");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgWithdrawValidatorCommission into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgWithdrawValidatorCommission(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgWithdrawValidatorCommission rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawValidatorCommission.class);
            CosmosLikeMsgWithdrawValidatorCommission javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgWithdrawValidatorCommission(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgWithdrawValidatorCommission
     * @param msg The message to unwrap
     * @return CosmosLikeMsgWithdrawValidatorCommission the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgWithdrawValidatorCommission(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgWithdrawValidatorCommission javaResult = CosmosLikeMessage.unwrapMsgWithdrawValidatorCommission(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgWithdrawValidatorCommission rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgWithdrawValidatorCommission.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgWithdrawValidatorCommission");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Wrap the given CosmosLikeMsgUnjail into a CosmosLikeMessage
     * @param msg The message you need to wrap.
     * @return CosmosLikeMessage A wrapped message.
     */
    @ReactMethod
    public void wrapMsgUnjail(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMsgUnjail rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgUnjail.class);
            CosmosLikeMsgUnjail javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMessage javaResult = CosmosLikeMessage.wrapMsgUnjail(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMessage");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
    /**
     * Unwrap a message to a CosmosLikeMsgUnjail
     * @param msg The message to unwrap
     * @return CosmosLikeMsgUnjail the unwrapped message
     */
    @ReactMethod
    public void unwrapMsgUnjail(ReadableMap msg, Promise promise) {
        try
        {
            RCTCoreCosmosLikeMessage rctParam_msg = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_0 = rctParam_msg.getJavaObjects().get(msg.getString("uid"));
            CosmosLikeMsgUnjail javaResult = CosmosLikeMessage.unwrapMsgUnjail(javaParam_0);

            String javaResult_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMsgUnjail rctImpl_javaResult = this.reactContext.getNativeModule(RCTCoreCosmosLikeMsgUnjail.class);
            rctImpl_javaResult.getJavaObjects().put(javaResult_uuid, javaResult);
            WritableNativeMap result = new WritableNativeMap();
            result.putString("type","RCTCoreCosmosLikeMsgUnjail");
            result.putString("uid",javaResult_uuid);

            promise.resolve(result);
        }
        catch(Exception e)
        {
            promise.reject(e.toString(), e.getMessage());
        }
    }
}
