// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

package com.ledger.reactnative;

import co.ledger.core.CosmosGasLimitRequest;
import co.ledger.core.CosmosLikeMessage;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableNativeArray;
import com.facebook.react.bridge.ReadableNativeMap;
import com.facebook.react.bridge.WritableNativeArray;
import com.facebook.react.bridge.WritableNativeMap;
import com.facebook.react.module.annotations.ReactModule;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;
import java.util.UUID;

/** Class representing a GasLimit request for the Gaia node */
@ReactModule(name = "RCTCoreCosmosGasLimitRequest")
public class RCTCoreCosmosGasLimitRequest extends ReactContextBaseJavaModule {
    private final ReactApplicationContext reactContext;
    private Map<String, CosmosGasLimitRequest> javaObjects;
    private Map<String, Object> implementationsData;
    public Map<String, CosmosGasLimitRequest> getJavaObjects()
    {
        return javaObjects;
    }

    public RCTCoreCosmosGasLimitRequest(ReactApplicationContext reactContext)
    {
        super(reactContext);
        this.reactContext = reactContext;
        this.javaObjects = new HashMap<String, CosmosGasLimitRequest>();
        this.implementationsData = new HashMap<>();
    }

    @Override
    public String getName()
    {
        return "RCTCoreCosmosGasLimitRequest";
    }
    @ReactMethod
    public void release(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            this.javaObjects.remove(uid);
            promise.resolve(0);
        }
        else
        {
            promise.reject("Failed to release instance of RCTCoreCosmosGasLimitRequest", "First parameter of RCTCoreCosmosGasLimitRequest::release should be an instance of RCTCoreCosmosGasLimitRequest");
        }
    }
    @ReactMethod
    public void log(Promise promise)
    {
        WritableNativeArray result = new WritableNativeArray();
        for (Map.Entry<String, CosmosGasLimitRequest> elem : this.javaObjects.entrySet())
        {
            result.pushString(elem.getKey());
        }
        promise.resolve(result);
    }
    @ReactMethod
    public void flush(Promise promise)
    {
        this.javaObjects.clear();
        promise.resolve(0);
    }
    @ReactMethod
    public void isNull(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (this.javaObjects.get(uid) == null)
            {
                promise.resolve(true);
                return;
            }
            else
            {
                promise.resolve(false);
                return;
            }
        }
        promise.resolve(true);
    }

    @ReactMethod
    public void init(String memo, ReadableArray messages, Double amplifier, Promise promise) {
        WritableNativeMap implementationsData = new WritableNativeMap();
        ArrayList<CosmosLikeMessage> javaParam_1 = new ArrayList<CosmosLikeMessage>();
        WritableNativeArray javaParam_1_data = new WritableNativeArray();

        for (int i = 0; i <  messages.size(); i++)
        {
            ReadableMap messages_elem = messages.getMap(i);
            RCTCoreCosmosLikeMessage rctParam_messages_elem = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            CosmosLikeMessage javaParam_1_elem = rctParam_messages_elem.getJavaObjects().get(messages_elem.getString("uid"));
            javaParam_1_data.pushString(messages_elem.getString("uid"));
            javaParam_1.add(javaParam_1_elem);
        }
        implementationsData.putArray("messages", javaParam_1_data);

        CosmosGasLimitRequest javaResult = new CosmosGasLimitRequest(memo, javaParam_1, amplifier);

        String uuid = UUID.randomUUID().toString();
        this.javaObjects.put(uuid, javaResult);
        WritableNativeMap finalResult = new WritableNativeMap();
        finalResult.putString("type","RCTCoreCosmosGasLimitRequest");
        finalResult.putString("uid",uuid);
        this.implementationsData.put(uuid, implementationsData);
        promise.resolve(finalResult);
    }
    public void mapImplementationsData(ReadableMap currentInstance)
    {
        String currentInstanceUid = currentInstance.getString("uid");
        CosmosGasLimitRequest javaImpl = this.javaObjects.get(currentInstanceUid);
        WritableNativeMap implementationsData = new WritableNativeMap();
        ArrayList<CosmosLikeMessage> field_1 = javaImpl.getMessages();
        WritableNativeArray converted_field_1 = new WritableNativeArray();
        for (CosmosLikeMessage field_1_elem : field_1)
        {
            String field_1_elem_uuid = UUID.randomUUID().toString();
            RCTCoreCosmosLikeMessage rctImpl_field_1_elem = this.reactContext.getNativeModule(RCTCoreCosmosLikeMessage.class);
            rctImpl_field_1_elem.getJavaObjects().put(field_1_elem_uuid, field_1_elem);
            WritableNativeMap converted_field_1_elem = new WritableNativeMap();
            converted_field_1_elem.putString("type","RCTCoreCosmosLikeMessage");
            converted_field_1_elem.putString("uid",field_1_elem_uuid);
            converted_field_1.pushMap(converted_field_1_elem);
        }
        implementationsData.putArray("messages", converted_field_1);
        this.implementationsData.put(currentInstanceUid, implementationsData);
    }
    @ReactMethod
    public void getMemo(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosGasLimitRequest javaObj = this.javaObjects.get(uid);
            String result = javaObj.getMemo();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putString("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosGasLimitRequest::getMemo", "First parameter of RCTCoreCosmosGasLimitRequest::getMemo should be an instance of RCTCoreCosmosGasLimitRequest");
        }
    }

    @ReactMethod
    public void getMessages(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            if (!this.implementationsData.containsKey(uid))
            {
                this.mapImplementationsData(currentInstance);
            }
            ReadableNativeMap data = (ReadableNativeMap)this.implementationsData.get(uid);
            ReadableArray resultTmp = data.getArray("messages");
            WritableNativeArray result = new WritableNativeArray();
            for (int i = 0; i < resultTmp.size(); i++)
            {
                WritableNativeMap result_elem = new WritableNativeMap();
                result_elem.merge(resultTmp.getMap(i));
                result.pushMap(result_elem);
            }
            promise.resolve(result);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosGasLimitRequest::getMessages", "First parameter of RCTCoreCosmosGasLimitRequest::getMessages should be an instance of RCTCoreCosmosGasLimitRequest");
        }
    }

    @ReactMethod
    public void getAmplifier(ReadableMap currentInstance, Promise promise)
    {
        String uid = currentInstance.getString("uid");
        if (uid.length() > 0)
        {
            CosmosGasLimitRequest javaObj = this.javaObjects.get(uid);
            Double result = javaObj.getAmplifier();
            WritableNativeMap resultMap = new WritableNativeMap();
            resultMap.putDouble("value", result);
            promise.resolve(resultMap);
        }
        else
        {
            promise.reject("Failed to call RCTCoreCosmosGasLimitRequest::getAmplifier", "First parameter of RCTCoreCosmosGasLimitRequest::getAmplifier should be an instance of RCTCoreCosmosGasLimitRequest");
        }
    }

}
